Problem 1-1
	a) f1->f2->f4->f3
	b) f1->f4->f3->f2
	c) f4->f2->f3->f1
Problem 1-2
	a) nlogn
	b) nlogn
	c) n 
Problem 1-3
	a) No - only checks the mid point for peak, does not narrow the search properly
	b) Yes - Basic greedy 
	c) Yes
	d) Yes - same as 3
Problem 1-4
	a) nlogn
	b) n^2
	c) n
	d) n



Corrections:
Problem 1-1 c) f4->f1->f3->f2
		n^root(n)= 2^(log(n)*root(n))
		n^10*2^(n/2) = 2^(n/2+10log(n))
		as n goes to infinity n/2 > logn*rootn
		and of course 2^n is larger than 2^n/2
Problem 1-2 a) n + n/2 + n/4 + ... + 0 = 2n so O(n)
Problem 1-3 a) Yes - I missunderstood how it narrows the possibilities. I missed the 
		part where it checks which sub problem to go to next
	    c) No - The neighbors variable doesn't properly switch if there the program
		has seen a larger value. This causes an error where the neighbors value
		doesn't switch but then the next conditional only checks if the neighbors
		value and the current location are the same. This produces an improper
		answer.  
